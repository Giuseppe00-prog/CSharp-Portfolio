// <auto-generated />
using System;
using Ecommerce;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    [Migration("20251023171601_AddOrdersAndCustomers")]
    partial class AddOrdersAndCustomers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("Ecommerce.Data.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categorie");
                });

            modelBuilder.Entity("Ecommerce.Data.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Indirizzo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clienti");
                });

            modelBuilder.Entity("Ecommerce.Data.Models.Ordine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataOrdine")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Totale")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Ordini");
                });

            modelBuilder.Entity("Ecommerce.Data.Models.OrdineProdotto", b =>
                {
                    b.Property<int>("OrdineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProdottoId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PrezzoUnitario")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantita")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrdineId", "ProdottoId");

                    b.HasIndex("ProdottoId");

                    b.ToTable("OrdineProdotto");
                });

            modelBuilder.Entity("Ecommerce.Data.Models.Prodotto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Prezzo")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantitaDisponibile")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Prodotti");
                });

            modelBuilder.Entity("Ecommerce.Data.Models.Ordine", b =>
                {
                    b.HasOne("Ecommerce.Data.Models.Cliente", "Cliente")
                        .WithMany("Ordini")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Ecommerce.Data.Models.OrdineProdotto", b =>
                {
                    b.HasOne("Ecommerce.Data.Models.Ordine", "Ordine")
                        .WithMany("OrdineProdotti")
                        .HasForeignKey("OrdineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Data.Models.Prodotto", "Prodotto")
                        .WithMany()
                        .HasForeignKey("ProdottoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ordine");

                    b.Navigation("Prodotto");
                });

            modelBuilder.Entity("Ecommerce.Data.Models.Prodotto", b =>
                {
                    b.HasOne("Ecommerce.Data.Models.Categoria", "Categoria")
                        .WithMany("Prodotti")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Ecommerce.Data.Models.Categoria", b =>
                {
                    b.Navigation("Prodotti");
                });

            modelBuilder.Entity("Ecommerce.Data.Models.Cliente", b =>
                {
                    b.Navigation("Ordini");
                });

            modelBuilder.Entity("Ecommerce.Data.Models.Ordine", b =>
                {
                    b.Navigation("OrdineProdotti");
                });
#pragma warning restore 612, 618
        }
    }
}
